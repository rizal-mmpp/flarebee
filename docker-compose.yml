
version: '3.8'

services:
  postgres:
    image: postgres:15-alpine
    container_name: postgres_db
    restart: always
    environment:
      - POSTGRES_USER=${POSTGRES_USER}
      - POSTGRES_PASSWORD=${POSTGRES_PASSWORD}
      - POSTGRES_DB=${POSTGRES_DB}
    ports:
      - "5432:5432"
    volumes:
      - postgres_data:/var/lib/postgresql/data
  
  rabbitmq:
    image: rabbitmq:3-management-alpine
    container_name: rabbitmq
    ports:
      # AMQP protocol
      - "5672:5672"
      # HTTP management UI
      - "15672:15672"

  api:
    build:
      context: ./backend 
      dockerfile: Dockerfile
    container_name: api_service
    ports:
      - "8000:8000"
    volumes:
      - ./backend:/usr/src/app
      - /usr/src/app/node_modules
    env_file:
      - .env
    depends_on:
      - postgres
      - rabbitmq
    command: npm run dev

  # Placeholder for a future Headless CMS service
  cms_service:
    image: node:18-alpine # Example image, can be replaced with Strapi, Directus, etc.
    container_name: cms_service
    ports:
      - "1337:1337" # Common port for headless CMS
    environment:
      - NODE_ENV=development
    volumes:
      - ./cms:/srv/app # Mount a future 'cms' directory
    command: sh -c "echo 'CMS service placeholder. To implement, create a project in ./cms and update this service.' && tail -f /dev/null"

  # Placeholder for a future File Manager service
  file_manager_service:
    image: node:18-alpine # Example image
    container_name: file_manager_service
    ports:
      - "8081:8081"
    environment:
      - NODE_ENV=development
    volumes:
      - ./file-manager:/srv/app # Mount a future 'file-manager' directory
    command: sh -c "echo 'File Manager placeholder. To implement, create a project in ./file-manager and update this service.' && tail -f /dev/null"


# Define the named volumes
volumes:
  postgres_data:
