
'use client';

import { useState } from 'react';
import { Button } from '@/components/ui/button';
import { Card, CardContent, CardDescription, CardFooter, CardHeader, CardTitle } from '@/components/ui/card';
import { Alert, AlertDescription, AlertTitle } from "@/components/ui/alert";
import { Input } from '@/components/ui/input';
import { Label } from '@/components/ui/label';
import { Separator } from '@/components/ui/separator';
import { Accordion, AccordionContent, AccordionItem, AccordionTrigger } from '@/components/ui/accordion';
import { 
  createIpaymuRedirectPayment,
  checkIpaymuTransaction,
  type IpaymuPaymentResult,
  type IpaymuTransactionStatusResult,
  type CreateIpaymuPaymentArgs,
} from '@/lib/actions/ipaymu.actions';
import { Loader2, CheckCircle, AlertTriangle, ExternalLink, CreditCard, Search, Receipt } from 'lucide-react';
import Link from 'next/link';

// Helper to format IDR currency
const formatIDR = (amount: number) => {
  return new Intl.NumberFormat('id-ID', {
    style: 'currency',
    currency: 'IDR',
    minimumFractionDigits: 0,
    maximumFractionDigits: 0,
  }).format(amount);
};

export default function IpaymuTestPage() {
  // Create Payment State
  const [productName, setProductName] = useState('Sample RIO Template');
  const [productQty, setProductQty] = useState(1);
  const [productPrice, setProductPrice] = useState(75000);
  const [buyerName, setBuyerName] = useState('Test Buyer');
  const [buyerEmail, setBuyerEmail] = useState('testbuyer@example.com');
  const [buyerPhone, setBuyerPhone] = useState('081234567890');
  const [isProcessingPayment, setIsProcessingPayment] = useState(false);
  const [paymentResult, setPaymentResult] = useState<IpaymuPaymentResult | null>(null);

  // Check Transaction State
  const [transactionId, setTransactionId] = useState('');
  const [isCheckingTransaction, setIsCheckingTransaction] = useState(false);
  const [transactionStatusResult, setTransactionStatusResult] = useState<IpaymuTransactionStatusResult | null>(null);

  const handleCreatePayment = async () => {
    setIsProcessingPayment(true);
    setPaymentResult(null);

    const items = [{ name: productName, quantity: productQty, price: productPrice }];
    const totalAmount = items.reduce((sum, item) => sum + (item.price * item.quantity), 0);

    const args: CreateIpaymuPaymentArgs = {
      items,
      totalAmount,
      buyerName,
      buyerEmail,
      buyerPhone,
      // referenceId can be auto-generated by the action or specified here
    };
    const response = await createIpaymuRedirectPayment(args);
    setPaymentResult(response);
    if (response.success && response.data?.SessionID) {
        setTransactionId(response.data.SessionID); // Pre-fill for checking
    }
    setIsProcessingPayment(false);
  };

  const handleCheckTransaction = async () => {
    if (!transactionId) return;
    setIsCheckingTransaction(true);
    setTransactionStatusResult(null);
    const response = await checkIpaymuTransaction(transactionId);
    setTransactionStatusResult(response);
    setIsCheckingTransaction(false);
  };
  
  const renderRawResponse = (rawResponse: any) => (
    <details className="mt-2 text-xs">
      <summary className="cursor-pointer hover:underline text-muted-foreground">View Raw API Response</summary>
      <pre className="mt-1 p-2 bg-muted/50 rounded-md overflow-x-auto text-xs">
        {JSON.stringify(rawResponse, null, 2)}
      </pre>
    </details>
  );

  return (
    <div className="space-y-8">
      <Card>
        <CardHeader>
          <CardTitle className="text-2xl flex items-center">
            <CreditCard className="h-7 w-7 text-primary mr-3" />
            iPaymu Integration Test Panel
          </CardTitle>
          <CardDescription>
            Test iPaymu payment gateway integration. Ensure your 
            <code className="font-mono bg-muted px-1 py-0.5 rounded-sm text-xs mx-1">IPAYMU_VA</code> and 
            <code className="font-mono bg-muted px-1 py-0.5 rounded-sm text-xs mx-1">IPAYMU_API_KEY</code> are correctly configured.
            This page uses iPaymu Sandbox by default.
          </CardDescription>
        </CardHeader>
        
        <CardContent>
          <Accordion type="multiple" className="w-full space-y-4">
            {/* Create Payment Section */}
            <AccordionItem value="create-payment" className="border-b-0">
              <AccordionTrigger className="text-lg font-semibold text-foreground hover:no-underline p-4 bg-muted/30 rounded-t-lg">
                <div className="flex items-center text-left"> 
                  <span className="mr-2"><CreditCard className="h-5 w-5 text-primary/80" /></span>
                  1. Create iPaymu Redirect Payment
                </div>
              </AccordionTrigger>
              <AccordionContent className="p-4 border border-t-0 rounded-b-lg space-y-6">
                <div className="grid grid-cols-1 md:grid-cols-2 gap-4">
                  <div><Label htmlFor="productName">Product Name</Label><Input id="productName" value={productName} onChange={(e) => setProductName(e.target.value)} className="mt-1"/></div>
                  <div><Label htmlFor="productQty">Quantity</Label><Input id="productQty" type="number" value={productQty} onChange={(e) => setProductQty(Number(e.target.value))} className="mt-1"/></div>
                  <div><Label htmlFor="productPrice">Price per Item (IDR)</Label><Input id="productPrice" type="number" value={productPrice} onChange={(e) => setProductPrice(Number(e.target.value))} className="mt-1"/></div>
                  <div><Label htmlFor="totalAmountDisplay">Total Amount</Label><Input id="totalAmountDisplay" value={formatIDR(productPrice * productQty)} className="mt-1 bg-muted" readOnly/></div>
                  <div><Label htmlFor="buyerName">Buyer Name</Label><Input id="buyerName" value={buyerName} onChange={(e) => setBuyerName(e.target.value)} className="mt-1"/></div>
                  <div><Label htmlFor="buyerEmail">Buyer Email</Label><Input id="buyerEmail" type="email" value={buyerEmail} onChange={(e) => setBuyerEmail(e.target.value)} className="mt-1"/></div>
                  <div><Label htmlFor="buyerPhone">Buyer Phone</Label><Input id="buyerPhone" value={buyerPhone} onChange={(e) => setBuyerPhone(e.target.value)} className="mt-1"/></div>
                </div>
                <Button onClick={handleCreatePayment} disabled={isProcessingPayment || productQty <= 0 || productPrice <= 0} size="lg" className="w-full sm:w-auto">
                  {isProcessingPayment ? <Loader2 className="mr-2 h-5 w-5 animate-spin" /> : <CreditCard className="mr-2 h-5 w-5" />}
                  Create Test Payment
                </Button>
                {paymentResult && (
                  <div className="mt-4">
                    {!paymentResult.success ? (
                      <Alert variant="destructive">
                        <AlertTriangle className="h-5 w-5" />
                        <AlertTitle>Error Creating Payment</AlertTitle>
                        <AlertDescription>
                          <p>{paymentResult.message || 'An unknown error occurred.'}</p>
                          {paymentResult.rawResponse && renderRawResponse(paymentResult.rawResponse)}
                        </AlertDescription>
                      </Alert>
                    ) : paymentResult.data ? (
                      <Alert variant="default" className="border-green-500 bg-green-500/10">
                        <CheckCircle className="h-5 w-5 text-green-600" />
                        <AlertTitle className="text-green-700">Payment Initiated Successfully!</AlertTitle>
                        <AlertDescription className="text-green-600/90 space-y-2">
                          <p>Session ID: <span className="font-semibold">{paymentResult.data.SessionID}</span></p>
                          <div className="flex items-center gap-2">
                            <ExternalLink className="h-4 w-4" />
                            <Link href={paymentResult.data.Url} target="_blank" rel="noopener noreferrer" className="font-medium underline hover:text-green-700 break-all">
                              Open iPaymu Payment Page
                            </Link>
                          </div>
                          <p className="text-xs">{paymentResult.message}</p>
                          {paymentResult.rawResponse && renderRawResponse(paymentResult.rawResponse)}
                        </AlertDescription>
                      </Alert>
                    ) : null}
                  </div>
                )}
              </AccordionContent>
            </AccordionItem>

            {/* Check Transaction Status Section */}
            <AccordionItem value="check-transaction" className="border-b-0">
              <AccordionTrigger className="text-lg font-semibold text-foreground hover:no-underline p-4 bg-muted/30 rounded-t-lg">
                <div className="flex items-center text-left"> 
                  <span className="mr-2"><Search className="h-5 w-5 text-primary/80" /></span>
                  2. Check iPaymu Transaction Status
                </div>
              </AccordionTrigger>
              <AccordionContent className="p-4 border border-t-0 rounded-b-lg space-y-6">
                <div className="max-w-md">
                  <Label htmlFor="transactionId">iPaymu Transaction ID (SessionID)</Label>
                  <Input id="transactionId" value={transactionId} onChange={(e) => setTransactionId(e.target.value)} placeholder="Enter iPaymu Session ID / Trx ID" className="mt-1"/>
                </div>
                <Button onClick={handleCheckTransaction} disabled={isCheckingTransaction || !transactionId} size="lg" className="w-full sm:w-auto">
                  {isCheckingTransaction ? <Loader2 className="mr-2 h-5 w-5 animate-spin" /> : <Search className="mr-2 h-5 w-5" />}
                  Check Transaction Status
                </Button>
                 {transactionStatusResult && (
                  <div className="mt-4">
                    {!transactionStatusResult.success ? (
                      <Alert variant="destructive">
                        <AlertTriangle className="h-5 w-5" />
                        <AlertTitle>Error Checking Transaction</AlertTitle>
                        <AlertDescription>
                            <p>{transactionStatusResult.message || 'An unknown error occurred.'}</p>
                            {transactionStatusResult.rawResponse && renderRawResponse(transactionStatusResult.rawResponse)}
                        </AlertDescription>
                      </Alert>
                    ) : transactionStatusResult.data ? (
                      <Alert variant="default" className="border-blue-500 bg-blue-500/10">
                        <Receipt className="h-5 w-5 text-blue-600" />
                        <AlertTitle className="text-blue-700">Transaction Status</AlertTitle>
                        <AlertDescription className="text-blue-600/90 space-y-1">
                          <p>Status: <span className="font-semibold">{transactionStatusResult.data.StatusDesc} (Code: {transactionStatusResult.data.StatusCode}, Num: {transactionStatusResult.data.Status})</span></p>
                          <p>Transaction ID: <span className="font-semibold">{transactionStatusResult.data.TransactionId}</span></p>
                          <p>Session ID: <span className="font-semibold">{transactionStatusResult.data.SessionId}</span></p>
                          <p>Reference ID: <span className="font-semibold">{transactionStatusResult.data.ReferenceId}</span></p>
                          <p>Amount: <span className="font-semibold">{formatIDR(transactionStatusResult.data.Amount)}</span> (Fee: {formatIDR(transactionStatusResult.data.Fee)})</p>
                          <p>Payment Channel: <span className="font-semibold">{transactionStatusResult.data.Via} - {transactionStatusResult.data.Channel}</span></p>
                          <p>Payment No/Code: <span className="font-semibold">{transactionStatusResult.data.PaymentNo}</span></p>
                          <p>Expired: <span className="font-semibold">{transactionStatusResult.data.Expired}</span></p>
                          {transactionStatusResult.rawResponse && renderRawResponse(transactionStatusResult.rawResponse)}
                        </AlertDescription>
                      </Alert>
                    ) : null}
                  </div>
                )}
              </AccordionContent>
            </AccordionItem>
          </Accordion>
        </CardContent>
        <CardFooter>
            <p className="text-xs text-muted-foreground text-center w-full pt-4">
                Note: These tests directly interact with the iPaymu Sandbox API using your configured credentials.
                A webhook endpoint at <code className="font-mono bg-muted px-1 py-0.5 rounded-sm text-xs mx-1">/api/webhooks/ipaymu</code> should be set up in your iPaymu merchant dashboard to receive payment notifications.
            </p>
        </CardFooter>
      </Card>
    </div>
  );
}
