
'use server';

import Stripe from 'stripe';
import { headers } from 'next/headers';
// Removed redirect from next/navigation as we will return URL or error

// Ensure STRIPE_SECRET_KEY is set in your .env or .env.local
const stripeSecretKey = process.env.STRIPE_SECRET_KEY;

if (!stripeSecretKey) {
  console.warn("STRIPE_SECRET_KEY is not set. Stripe checkout will not function.");
}


interface CreateCheckoutSessionArgs {
  templateId: string;
  templateName: string;
  priceInCents: number; // Stripe expects price in cents
  userId?: string; // Optional: for associating purchase with a user
}

interface CreateCheckoutSessionResult {
  checkoutUrl?: string | null;
  error?: string;
}

export async function createCheckoutSession(args: CreateCheckoutSessionArgs): Promise<CreateCheckoutSessionResult> {
  if (!stripeSecretKey) {
    console.error('Stripe secret key is not configured. Cannot create checkout session.');
    return { error: 'Payment system is not configured. Please contact support.' };
  }
  
  const stripe = new Stripe(stripeSecretKey);
  
  const host = headers().get('host');
  const protocol = process.env.NODE_ENV === 'development' ? 'http' : 'https';
  const appBaseUrl = `${protocol}://${host}`;

  try {
    const session = await stripe.checkout.sessions.create({
      payment_method_types: ['card'],
      line_items: [
        {
          price_data: {
            currency: 'usd',
            product_data: {
              name: args.templateName,
              metadata: { templateId: args.templateId },
              images: [], // Consider adding template.imageUrl here if available and desired
            },
            unit_amount: args.priceInCents,
          },
          quantity: 1,
        },
      ],
      mode: 'payment',
      success_url: `${appBaseUrl}/purchase/success?session_id={CHECKOUT_SESSION_ID}`,
      cancel_url: `${appBaseUrl}/purchase/cancelled`,
      metadata: {
        templateId: args.templateId,
        userId: args.userId || '', 
      },
    });

    if (session.url) {
      return { checkoutUrl: session.url };
    } else {
      return { error: 'Stripe session URL not found after creation.' };
    }
  } catch (error: any) {
    console.error('Error creating Stripe checkout session:', error);
    return { error: error.message || 'Could not create checkout session due to an unexpected error.' };
  }
}

