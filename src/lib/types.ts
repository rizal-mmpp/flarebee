
import type { User as FirebaseUser } from 'firebase/auth';

export interface Category {
  id: string;
  name: string;
  slug: string;
}

export interface Template {
  id: string; // Firestore document ID
  title: string;
  title_lowercase?: string; // For case-insensitive search
  description: string;
  longDescription?: string;
  category: Category;
  price: number; // Assumed to be in IDR for Xendit integration
  tags: string[];
  imageUrl: string; // Main preview image
  dataAiHint?: string;
  screenshots?: string[]; // URLs of additional screenshots
  previewUrl?: string; // Link to live preview
  downloadZipUrl: string; // Link to download the template ZIP
  githubUrl?: string; // Link to the GitHub repository (optional)
  createdAt: string; // ISO date string (from Firestore Timestamp)
  updatedAt?: string; // ISO date string (from Firestore Timestamp)
  author?: string; // Optional author name / UID
}

// Firebase related types
export interface AuthUser extends FirebaseUser {
  role?: 'admin' | 'user';
}

export interface UserProfile {
  uid: string;
  email: string | null;
  displayName: string | null;
  role: 'admin' | 'user';
  createdAt: Date; // Stored as Firestore Timestamp, converted to Date on client
  photoURL?: string | null;
}

export interface CartItem {
  id: string; // template.id
  title: string;
  price: number; // Assumed to be in IDR
  imageUrl: string;
  quantity: number; // Will typically be 1 for templates
}

// Order related types
export interface PurchasedTemplateItem {
  id: string; // template.id
  title: string;
  price: number; // Price in IDR at the time of purchase
}

export interface Order {
  id: string; // Firestore document ID (auto-generated by Firestore)
  userId: string;
  userEmail?: string; // For display convenience in admin panel
  orderId: string; // The external_id from payment gateway (Xendit external_id)
  items: PurchasedTemplateItem[];
  totalAmount: number; // Total amount in IDR
  currency: 'IDR'; // Currency code
  status: 'completed' | 'pending' | 'failed' | 'expired'; // Added 'expired'
  paymentGateway: string; // e.g., 'xendit'
  createdAt: string; // ISO date string (from Firestore Timestamp)
  updatedAt?: string; // ISO date string, for status changes
  xenditInvoiceId?: string; // Xendit's internal invoice ID
  xenditInvoiceUrl?: string; // URL to Xendit's hosted payment page
  xenditExpiryDate?: string; // ISO date string for invoice expiry
  xenditPaymentStatus?: string; // Initial payment status from Xendit (e.g., PENDING)
}

// Used for creating new orders; id is auto-generated, createdAt is serverTimestamp
export type OrderInputData = Omit<Order, 'id' | 'createdAt' | 'updatedAt'> & {
  createdAt?: any; // Allows for Firestore serverTimestamp during creation
  updatedAt?: any; // Allows for Firestore serverTimestamp
};

export interface FetchTemplatesParams {
  pageIndex?: number;
  pageSize?: number;
  sorting?: { id: string; desc: boolean }[];
  searchTerm?: string;
  // categorySlug?: string; // Future use for server-side category filtering if needed
}

export interface FetchTemplatesResult {
  data: Template[];
  pageCount: number;
  totalItems: number;
}

export interface SitePage {
  id: string; // e.g., "privacy-policy"
  title: string;
  content: string; // Markdown content
  updatedAt?: any; // Firestore Timestamp
}
