
import type { User as FirebaseUser } from 'firebase/auth';

export interface Category {
  id: string;
  name: string;
  slug: string;
}

export interface Template {
  id: string; // Firestore document ID
  title: string;
  description: string;
  longDescription?: string;
  category: Category;
  price: number;
  tags: string[];
  imageUrl: string; // Main preview image
  dataAiHint?: string;
  screenshots?: string[]; // URLs of additional screenshots
  previewUrl?: string; // Link to live preview
  downloadZipUrl: string; // Link to download the template ZIP
  githubUrl?: string; // Link to the GitHub repository (optional)
  // files field was a bit complex, downloadZipUrl and githubUrl are more direct
  createdAt: string; // ISO date string (from Firestore Timestamp)
  updatedAt?: string; // ISO date string (from Firestore Timestamp)
  author?: string; // Optional author name / UID
}

// Firebase related types
export interface AuthUser extends FirebaseUser {
  role?: 'admin' | 'user';
}

export interface UserProfile {
  uid: string;
  email: string | null;
  displayName: string | null;
  role: 'admin' | 'user';
  createdAt: Date; // Stored as Firestore Timestamp, converted to Date on client
  photoURL?: string | null;
}

export interface CartItem {
  id: string; // template.id
  title: string;
  price: number;
  imageUrl: string;
  quantity: number; // Will typically be 1 for templates
}

// Order related types
export interface PurchasedTemplateItem {
  id: string; // template.id
  title: string;
  price: number;
  // imageUrl?: string; // Optional: could be looked up if needed to save space
}

export interface Order {
  id: string; // Firestore document ID (auto-generated by Firestore)
  userId: string;
  userEmail?: string; // For display convenience in admin panel
  orderId: string; // The external_id from payment gateway or our generated one
  items: PurchasedTemplateItem[];
  totalAmount: number;
  currency: string;
  status: 'completed' | 'pending' | 'failed';
  paymentGateway: string;
  createdAt: string; // ISO date string (from Firestore Timestamp)
}

// Used for creating new orders; id is auto-generated, createdAt is serverTimestamp
export type OrderInputData = Omit<Order, 'id' | 'createdAt'> & {
  createdAt?: any; // Allows for Firestore serverTimestamp during creation
};

